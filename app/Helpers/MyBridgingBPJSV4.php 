<?php
namespace App\Helpers;
use LZCompressor\LZString;
use App\CBpjs;

class MyBridgingBPJSV4
{
    public static function sendApi($path, $method, $data = false, $timeout = 15, $config = null, $settingBpjs = false, $limitV4 = null) {
        $setting = CBpjs::first();
        $path = $setting->url.$path;
        $secret = $setting->secret;
        $consid = $setting->consid;
        $username = $setting->username;
        $password = $setting->password;
        $user_key = $setting->user_key;

        $time = time();
        $signature = base64_encode(hash_hmac('sha256', $consid."&".$time, $secret, true));
        $auth = 'Basic '.base64_encode($username.':'.$password.':095');
        // dd('path: '. $path, 'method: '. $method, 'data : '. json_encode($data,true), 'username :'. $username, 'password:'. $password, 'consid: '. $consid, 'time: '. $time, 'signature:'. $signature, 'auth: '. $auth, 'user_key: '.$user_key); 

        $ch = curl_init($path);
        switch ($method) {
            case "POST":
                curl_setopt($ch, CURLOPT_POST, 1);
                if ($data)
                    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
                break;
            case "PUT":
                curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "PUT");
                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
                break;
            case "DELETE":
                curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "DELETE");
                break;
            default:
                if ($data)
                    $url = sprintf("%s?%s", $url, http_build_query($data));
        }
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
        curl_setopt($ch, CURLOPT_NOBODY, false);
        curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array(
            'Content-Type:application/json',
            'X-cons-id: '.$consid,
            'X-Timestamp: '.$time,
            'X-Signature: '.$signature,
            'X-Authorization: '.$auth,
            'user_key: '.$user_key
            )
        );

        $response = curl_exec($ch);
        if ($response) {
            $response = json_decode($response, true);
            $kunci = $consid.$secret.$time;
            $nilairespon = $response['response'];
            $response['response'] = self::decompress(self::stringDecrypt($kunci, $nilairespon));
            $result = $response;
        } else {
            $result = [
                'cerrorcode' => 'timeout',
                'message' => "<b>Koneksi dengan BPJS mencapai batas waktu</b>, Silahkan cek kembali koneksi internet Anda, atau tunggu beberapa saat hingga <b>Webservice BPJS kembali normal. </b>"
            ];
        }
        curl_close($ch);
        
        return $result;
    }

    public static function stringDecrypt($key, $string) {
        $encrypt_method = 'AES-256-CBC';
        $key_hash= hex2bin(hash('sha256', $key));
        $iv = substr(hex2bin(hash('sha256', $key)), 0, 16);
        $output = openssl_decrypt(base64_decode($string), $encrypt_method, $key_hash, OPENSSL_RAW_DATA, $iv);
        return $output;
    }
    
    public static function decompress($string) {
        return json_decode(LZString::decompressFromEncodedURIComponent($string), true);
    }

    public static function getErrorMessage($response = null, $version = "3")
    {
        $message = 'Ada kesalahan bridging BPJS: ';
        $code = isset($response['metaData']['code']) ? $response['metaData']['code'] : 0;
        switch($code){
            case 0:
                $message .= 'Koneksi ke Webservice BPJS gagal. Silahkan cek konfigurasi BPJS dan status Webservice BPJS!';
                break;
            case 500: 
                $message .= 'Koneksi ke Webservice BPJS gagal. Silahkan cek status Webservice BPJS! (Kode:'.$code.')';
                break;
            case 401: 
                if ($version == "4") {
                    $message .= 'Peserta sudah di-entri di poli yang sama pada hari yang sama (Kode:'.$code.')';
                } else {
                    $message .= 'Anda tidak diperkenankan terkoneksi ke Webservice BPJS. Pastikan username dan password di <b>Pengaturan - BPJS</b> disesuaikan dengan username dan password PCare terbaru! (Kode:'.$code.')';
                }
                break;
            case 408: 
                $message .= 'Respon dari Webservice BPJS lambat. Tunggu beberapa saat hingga webservice kembali normal! (Kode:'.$code.')';
                break;
            case 424: 
                $message .= 'Data yang dimasukkan tidak sesuai dengan sistem. Silahkan cek kembali data yang dimasukan! (Kode:'.$code.')';
                break;
            case 412:
                if ($version == "4.0") {
                    $message .= "<b>".($response['response']['field'] ?? '')." ".($response['response']['message'] ?? '').'</b>. Silahkan cek kembali data yang dimasukan! (Kode:'.$code.')';
                } else {
                    $message .= (isset($response['response']['message']) ? $response['response']['message'] : "<b>".($response['response'][0]['field'] ?? '')." ".($response['response'][0]['message'] ?? '')).'</b>. Silahkan cek kembali data yang dimasukan! (Kode:'.$code.')';
                }
                 
                break;
            case 204: 
                $message .= 'Data tidak ditemukan! (Kode:'.$code.')';
                break;
            case 304: 
                $message .= 'Data sudah ada di PCare BPJS! (Kode:'.$code.')';
                break;
            case 2: 
                $message = 'Service helper sedang gangguan, silahkan hubungi team support kami';
                break;
            case 3: 
                $message = 'Authentication Ke Service Helper gagal, silahkan hubungi team support kami';
                break;
            default:
                if($version == "4.0") {
                    if($code == 203)
                    {
                        $message .= ($response['metaData']['message'] ?? "") .'(Kode:'.$code.')';
                    }
                } else {
                    $message .= 'Koneksi ke Webservice BPJS gagal (Kode:'.$code.')';
                }
                break;
        }
        return $message;
    }

    public static function getErrorMessageO2O()
    {
        $result['o2o'] = [
            'status' => 'warning',
            'message' => "<br><b>Anda saat ini tidak dapat terkoneksi dengan BPJS, dikarenakan sedang dalam mode ePuskesmas Offline, Silahkan lengkapi data pemeriksaan dengan benar, lalu lakukan sinkronisasi di mode ePuskesmas Online!</b>"
        ];
        return $result;
    }

    public static function defaultPostMCU($data) 
    {
        $data["darahRutinHemo"] = 0;
        $data["darahRutinLeu"] = 0;
        $data["darahRutinErit"] = 0;
        $data["darahRutinLaju"] = 0;
        $data["darahRutinHema"] = 0;
        $data["darahRutinTrom"] = 0;
        $data["lemakDarahHDL"] = 0;
        $data["lemakDarahLDL"] = 0;
        $data["lemakDarahChol"] = 0;
        $data["lemakDarahTrigli"] = 0;
        $data["gulaDarahSewaktu"] = 0;
        $data["gulaDarahPuasa"] = 0;
        $data["gulaDarahPostPrandial"] = 0;
        $data["gulaDarahHbA1c"] = 0;
        $data["fungsiHatiSGOT"] = 0;
        $data["fungsiHatiSGPT"] = 0;
        $data["fungsiHatiGamma"] = 0;
        $data["fungsiHatiProtKual"] = 0;
        $data["fungsiHatiAlbumin"] = 0;
        $data["fungsiGinjalCrea"] = 0;
        $data["fungsiGinjalUreum"] = 0;
        $data["fungsiGinjalAsam"] = 0;
        $data["fungsiJantungABI"] = 0;

        return $data;   
    }
}